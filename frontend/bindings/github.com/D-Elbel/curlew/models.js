// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Create as $Create} from "@wailsio/runtime";

export class Collection {
    /**
     * Creates a new Collection instance.
     * @param {Partial<Collection>} [$$source = {}] - The source object to create the Collection.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("description" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["description"] = "";
        }
        if (!("parentCollectionId" in $$source)) {
            /**
             * @member
             * @type {string | null}
             */
            this["parentCollectionId"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Collection instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Collection}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Collection(/** @type {Partial<Collection>} */($$parsedSource));
    }
}

export class Request {
    /**
     * Creates a new Request instance.
     * @param {Partial<Request>} [$$source = {}] - The source object to create the Request.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("collectionId" in $$source)) {
            /**
             * @member
             * @type {string | null}
             */
            this["collectionId"] = null;
        }
        if (!("collectionName" in $$source)) {
            /**
             * @member
             * @type {string | null}
             */
            this["collectionName"] = null;
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("description" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["description"] = "";
        }
        if (!("method" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["method"] = "";
        }
        if (!("url" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["url"] = "";
        }
        if (!("headers" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["headers"] = "";
        }
        if (!("body" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["body"] = "";
        }
        if (!("bodyType" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["bodyType"] = "";
        }
        if (!("bodyFormat" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["bodyFormat"] = "";
        }
        if (!("auth" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["auth"] = "";
        }
        if (!("sortOrder" in $$source)) {
            /**
             * @member
             * @type {number | null}
             */
            this["sortOrder"] = null;
        }
        if (/** @type {any} */(false)) {
            /**
             * @member
             * @type {Response | null | undefined}
             */
            this["response"] = null;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Request instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Request}
     */
    static createFrom($$source = {}) {
        const $$createField13_0 = $$createType1;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("response" in $$parsedSource) {
            $$parsedSource["response"] = $$createField13_0($$parsedSource["response"]);
        }
        return new Request(/** @type {Partial<Request>} */($$parsedSource));
    }
}

export class Response {
    /**
     * Creates a new Response instance.
     * @param {Partial<Response>} [$$source = {}] - The source object to create the Response.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["id"] = 0;
        }
        if (!("statusCode" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["statusCode"] = 0;
        }
        if (!("headers" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["headers"] = "";
        }
        if (!("body" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["body"] = "";
        }
        if (!("runtimeMS" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["runtimeMS"] = 0;
        }
        if (!("requestID" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["requestID"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Response instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Response}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new Response(/** @type {Partial<Response>} */($$parsedSource));
    }
}

export class UserSettings {
    /**
     * Creates a new UserSettings instance.
     * @param {Partial<UserSettings>} [$$source = {}] - The source object to create the UserSettings.
     */
    constructor($$source = {}) {
        if (!("theme" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["theme"] = "";
        }
        if (!("defaultEnv" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["defaultEnv"] = "";
        }
        if (!("enableAnimations" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["enableAnimations"] = false;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new UserSettings instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {UserSettings}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new UserSettings(/** @type {Partial<UserSettings>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = Response.createFrom;
const $$createType1 = $Create.Nullable($$createType0);
