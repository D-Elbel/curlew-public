// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Ã‚ MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import {Call as $Call, Create as $Create} from "@wailsio/runtime";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as json$0 from "../../../encoding/json/models.js";

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import * as $models from "./models.js";

/**
 * @param {string} name
 * @param {string} description
 * @param {string | null} parentId
 * @returns {Promise<$models.Collection> & { cancel(): void }}
 */
export function CreateCollection(name, description, parentId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1554286192, name, description, parentId));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType0($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} collectionId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteCollection(collectionId) {
    let $resultPromise = /** @type {any} */($Call.ByID(3206062955, collectionId));
    return $resultPromise;
}

/**
 * @param {number} id
 * @returns {Promise<void> & { cancel(): void }}
 */
export function DeleteRequest(id) {
    let $resultPromise = /** @type {any} */($Call.ByID(2773160300, id));
    return $resultPromise;
}

/**
 * @param {number} requestID
 * @returns {Promise<$models.Request> & { cancel(): void }}
 */
export function DuplicateRequest(requestID) {
    let $resultPromise = /** @type {any} */($Call.ByID(456732318, requestID));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} requestID
 * @param {string} method
 * @param {string} requestUrl
 * @param {string} headersIn
 * @param {string} body
 * @param {string} bodyType
 * @param {string} bodyFormat
 * @param {string} auth
 * @returns {Promise<json$0.RawMessage> & { cancel(): void }}
 */
export function ExecuteRequest(requestID, method, requestUrl, headersIn, body, bodyType, bodyFormat, auth) {
    let $resultPromise = /** @type {any} */($Call.ByID(1005662952, requestID, method, requestUrl, headersIn, body, bodyType, bodyFormat, auth));
    return $resultPromise;
}

/**
 * @returns {Promise<$models.Collection[]> & { cancel(): void }}
 */
export function GetAllCollections() {
    let $resultPromise = /** @type {any} */($Call.ByID(668722804));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType2($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * TODO: lock down response object, replace "" with nulls etc
 * @returns {Promise<$models.Request[]> & { cancel(): void }}
 */
export function GetAllRequestsList() {
    let $resultPromise = /** @type {any} */($Call.ByID(1997938213));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} id
 * @returns {Promise<$models.Request> & { cancel(): void }}
 */
export function GetRequest(id) {
    let $resultPromise = /** @type {any} */($Call.ByID(1989088877, id));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} requestID
 * @returns {Promise<$models.Response[]> & { cancel(): void }}
 */
export function GetResponseHistory(requestID) {
    let $resultPromise = /** @type {any} */($Call.ByID(3419080141, requestID));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType5($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @returns {Promise<void> & { cancel(): void }}
 */
export function Init() {
    let $resultPromise = /** @type {any} */($Call.ByID(293696986));
    return $resultPromise;
}

/**
 * @param {string | null} collectionId
 * @param {string} name
 * @param {string} description
 * @param {string} method
 * @param {string} url
 * @param {string} headers
 * @param {string} body
 * @param {string} bodyType
 * @param {string} bodyFormat
 * @param {string} auth
 * @param {$models.Response | null} response
 * @returns {Promise<$models.Request> & { cancel(): void }}
 */
export function SaveRequest(collectionId, name, description, method, url, headers, body, bodyType, bodyFormat, auth, response) {
    let $resultPromise = /** @type {any} */($Call.ByID(1341307122, collectionId, name, description, method, url, headers, body, bodyType, bodyFormat, auth, response));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {string} searchTerm
 * @returns {Promise<$models.Request[]> & { cancel(): void }}
 */
export function SearchRequests(searchTerm) {
    let $resultPromise = /** @type {any} */($Call.ByID(2775248826, searchTerm));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType3($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

/**
 * @param {number} requestId
 * @param {string} collectionId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetRequestCollection(requestId, collectionId) {
    let $resultPromise = /** @type {any} */($Call.ByID(1870864429, requestId, collectionId));
    return $resultPromise;
}

/**
 * TODO: Implement this
 * @param {number} id
 * @param {number} sortOrder
 * @returns {Promise<void> & { cancel(): void }}
 */
export function SetRequestSortOrder(id, sortOrder) {
    let $resultPromise = /** @type {any} */($Call.ByID(4050259431, id, sortOrder));
    return $resultPromise;
}

/**
 * @param {string} collectionId
 * @param {string | null} parentId
 * @returns {Promise<void> & { cancel(): void }}
 */
export function UpdateCollectionParent(collectionId, parentId) {
    let $resultPromise = /** @type {any} */($Call.ByID(98912709, collectionId, parentId));
    return $resultPromise;
}

/**
 * @param {number} id
 * @param {string | null} collectionId
 * @param {string} name
 * @param {string} description
 * @param {string} method
 * @param {string} requestUrl
 * @param {string} headers
 * @param {string} body
 * @param {string} bodyType
 * @param {string} bodyFormat
 * @param {string} auth
 * @param {$models.Response | null} response
 * @returns {Promise<$models.Request> & { cancel(): void }}
 */
export function UpdateRequest(id, collectionId, name, description, method, requestUrl, headers, body, bodyType, bodyFormat, auth, response) {
    let $resultPromise = /** @type {any} */($Call.ByID(1380900686, id, collectionId, name, description, method, requestUrl, headers, body, bodyType, bodyFormat, auth, response));
    let $typingPromise = /** @type {any} */($resultPromise.then(($result) => {
        return $$createType1($result);
    }));
    $typingPromise.cancel = $resultPromise.cancel.bind($resultPromise);
    return $typingPromise;
}

// Private type creation functions
const $$createType0 = $models.Collection.createFrom;
const $$createType1 = $models.Request.createFrom;
const $$createType2 = $Create.Array($$createType0);
const $$createType3 = $Create.Array($$createType1);
const $$createType4 = $models.Response.createFrom;
const $$createType5 = $Create.Array($$createType4);
